# Generated by Django 4.2.6 on 2023-10-28 14:23

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.contrib.auth.models import Group, Permission
from django.core.management.sql import emit_post_migrate_signal
import logging


logger = logging.getLogger(__name__)


role_permissions = {
    'Admin': [
        'view_group',
        'add_group',
        'change_group',
        'delete_group',
        'view_category',
        'add_category',
        'change_category',
        'delete_category',
        'view_user',
        'change_user',
        'delete_user',
        'view_playlist',
        'add_playlist',
        'change_playlist',
        'delete_playlist',
        'view_song',
        'add_song',
        'change_song',
        'delete_song'
    ],
    'Normal': [
        'view_user',
        'change_user',
        'delete_user',
        'view_playlist',
        'add_playlist',
        'change_playlist',
        'delete_playlist',
        'view_song',
        'add_song',
        'change_song',
        'delete_song',
        'view_category'
    ],
}


def add_role_permissions(apps, schema_editor):
    emit_post_migrate_signal(2, False, 'default')

    for r in role_permissions:
        role, created = Group.objects.get_or_create(name=r)
        logger.info(f'{r} Role retrieved')
        for p in role_permissions[r]:
            perm, created2 = Permission.objects.get_or_create(codename=p)
            role.permissions.add(perm)
            logger.info(f'Permitting {r} to {p}')
        role.save()


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='playlists/')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to='comparer.category')),
                ('playlist_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('artist', models.CharField(max_length=100)),
                ('year', models.IntegerField(default=None, null=True)),
                ('genre', models.CharField(max_length=50)),
                ('artwork', models.ImageField(blank=True, null=True, upload_to='artworks/')),
                ('song_file', models.FileField(blank=True, null=True, upload_to='songs/')),
                ('playlist', models.ManyToManyField(related_name='songs', to='comparer.playlist')),
                ('song_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='songs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(add_role_permissions),
    ]
